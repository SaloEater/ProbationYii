<?php
/**
 * Created by PhpStorm.
 * User: Tom
 * Date: 14.11.2018
 * Time: 10:50
 */

namespace bookkeeping\entities;


use bookkeeping\repositories\bookkeeping\FamilyMemberRepository;
use bookkeeping\services\manage\bookkeeping\FamilyMemberService;
use yii\db\ActiveRecord;

/**
 * Class Family
 * @package bookkeeping\entities
 * @property int $id
 * @property int $ownerId
 */
class Family extends ActiveRecord
{
    /**
     * @var FamilyMember[] $members
     */
    public $members = [];

    /**
     * @var FamilyMember $owner
     */
    private $owner;

    public static function create($ownerId): self
    {
        $family = new static();
        $family->ownerId = $ownerId;

        //TODO: Create root tree for category
        return $family;
    }

    public static function tableName()
    {
        return '{{%families}}';
    }

    public function beforeSave($insert)
    {
        //TODO: Save members and owner

        if ($this->id) {
            $this->saveMembers();
            $this->saveOwner();
        }

        return parent::beforeSave($insert);
    }

    public function saveMembers()
    {
        (new FamilyMemberRepository())->saveSome($this->members);
    }

    public function saveOwner()
    {
        (new FamilyMemberRepository())->save($this->owner);
    }

    public function afterFind()
    {
        //TODO: Fill members and owner
        $this->members = (new FamilyMemberRepository())->getByFamily($this->id);
        $this->fillOwner();
        parent::afterFind();
    }

    public function fillOwner()
    {
        $owner = (new FamilyMemberRepository())->get($this->ownerId);
        $this->owner = $owner;
        $this->removeMemberFromInnerArray($owner);
    }

    private function removeMemberFromInnerArray(FamilyMember $one)
    {
        foreach ($this->members as $i => $member) {
            if ($member->userId == $one->userId) {
                unset($this->members[$i]);
                break;
            }
        }
    }

    public function setOwner($ownerId)
    {
        $this->ownerId = $ownerId;
        //TODO: Replace $owner or remove this function
    }

    public function createOwner()
    {
        $this->owner = \Yii::$container->get(FamilyMemberService::class)
            ->create($this->ownerId, $this->id);
    }

    public function createMember($userId)
    {
        $member = \Yii::$container->get(FamilyMemberService::class)
            ->create($this->$userId, $this->id);

        $this->addMember($member);
    }

    public function addMember(FamilyMember $member)
    {
        if ($this->contains($member)) {
            throw new \RuntimeException('Member already added');
        }
        $this->members[] = $member;
    }

    public function contains(FamilyMember $member)
    {
        foreach ($this->members as $familyMember) {
            if ($familyMember->equals($member)) {
                return true;
            }
        }

        return $this->isOwner($member->userId);
    }

    public function isOwner($userId)
    {
        return $this->ownerId === $userId;
    }

    public function removeMember($userId)
    {
        foreach ($this->members as $key => $familyMember) {
            if ($familyMember->userId === $userId) {
                unset($this->members[$key]);

                return;
            }
        }
        throw new \RuntimeException('Member is not belong to this family');
    }

    public function loadMembers($members)
    {
        foreach ($members as $familyMember) {
            if (!$this->contains($familyMember)) {
                $this->members[] = $familyMember;
            }
        }
    }

    public function getAll(): array
    {
        $members = [];
        foreach ($this->members as $member) {
            $members[] = $member;
        }
        $members[] = $this->owner;

        return $members;
    }

    public function delete()
    {
        $this->removeAll();
        $this->removeOwner();

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function removeAll()
    {
        $service = new FamilyMemberRepository();
        foreach ($this->members as $familyMember) {
            $service->remove($familyMember);
        }
        $this->members = [];
    }

    public function removeOwner()
    {
        $service = new FamilyMemberRepository();
        $service->remove($this->owner);
        $this->owner = null;
    }

}